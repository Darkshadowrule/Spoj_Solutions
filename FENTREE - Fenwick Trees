/*
Mr. Fenwick has an array a with many integers, and his children love to do operations on the
array with their father. The operations can be a query or an update.
For each query the children say two indices l and r , and their father answers back with the sum
of the elements from indices l to r (both included).
When there is an update, the children say an index i and a value x , and Fenwick will add x to
ai (so the new value of ai  is ai + x ).
Because indexing the array from zero is too obscure for children, all indices start from 1.
Fenwick is now too busy to play games, so he needs your help with a program that plays with his
children for him, and he gave you an input/output specification.

Example
Input:
10
3 2 4 0 42 33 -1 -2 4 4
6
q 3 5
q 1 10
u 5 -2
q 3 5
u 6 7
q 4 7

Output:
46
89
44
79
*/


***************************************************************************************************************************************
***************************************************************************************************************************************
***************************************************************************************************************************************

#include <iostream> 
using namespace std; 

long long getSum(long long BITree[], long long index) 
{ 
    long long sum = 0; 

    index = index + 1; 
    while (index>0) 
    { 
        sum += BITree[index]; 
  
        index -= index & (-index); 
    } 
    return sum; 
} 
void updateBIT(long long BITree[], long long n, long long index, long long val) 
{ 
    index = index + 1; 
  
    while (index <= n) 
    { 
    BITree[index] += val; 
  
    index += index & (-index); 
    } 
} 
long long*constructBITree(long long arr[], long long n) 
{ 
    long long *BITree = new long long[n+1]; 
    for (long long i=1; i<=n; i++) 
        BITree[i] = 0; 
   
    for (long long i=0; i<n; i++) 
        updateBIT(BITree, n, i, arr[i]); 
  
  
    return BITree; 
} 

signed main()
{
	long long n,i;
	cin>>n;
	long long arr[n];
	for(i=0;i<n;i++)
	cin>>arr[i];
	long long q;
	cin>>q;
	long long *BITree = constructBITree(arr, n); 
	while(q--)
	{
		char ch;
		long long a,b;
		cin>>ch>>a>>b;
	
		if(ch=='q')
		{a-=2;
		b--;
			cout<<getSum(BITree, b)-getSum(BITree,a)<<endl; 
		}
		else
		{ a--;
		 updateBIT(BITree, n, a, b); 	
		}
		
	}
}







